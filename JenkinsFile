pipeline {
    agent any
    parameters {
        string(name: 'IMAGE_NAME', defaultValue: 'go-todo-app', description: 'Name for the Docker image')
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Tag for the Docker image')
    }
    environment {
        REGISTRY = 'registry.home.lan'
    }
    stages {
        stage('Lint') {
            agent {
                docker {
                    image 'golang:1.24.1'
                    reuseNode true
                    args '-u root'
                }
            }

            environment {
                HOME = '/go'
                GO111MODULE = 'on'
            }
            steps {
                echo 'Running gofmt and golint...'
                sh '''
                    go install golang.org/x/lint/golint@latest

                    UNFORMATTED=$(gofmt -l .)
                    if [ -n "$UNFORMATTED" ]; then
                        echo "The following files are not formatted:"
                        echo "$UNFORMATTED"
                        exit 1
                    fi

                    golint ./... | tee lint-report.txt
                    if grep -q . lint-report.txt; then
                        echo "Lint issues found"
                        exit 1
                    fi
                '''
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'golang:1.24.1'
                    reuseNode true
                    args '-u root'
                }
            }

            environment {
                HOME = '/go'
                GO111MODULE = 'on'
            }
            steps {
                echo 'Running unit tests with coverage...'
                sh '''
                    go mod tidy
                    go test -coverprofile=coverage.out ./...
                    go tool cover -html=coverage.out -o coverage.html
                '''
                archiveArtifacts artifacts: 'coverage.out, coverage.html', fingerprint: true
                publishHTML(target: [
                    reportDir: '.',
                    reportFiles: 'coverage.html',
                    reportName: 'Go Coverage Report',
                    keepAll: true
                ])
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${params.IMAGE_NAME}:${params.IMAGE_TAG}"
                    
                    // Verify Dockerfile exists
                    sh 'ls -l Dockerfile || echo "Dockerfile not found!"'
                    
                    // Build the Docker image
                    docker.build("${params.IMAGE_NAME}:${params.IMAGE_TAG}")
                    
                    // List built images for verification (fixed syntax)
                    sh "docker images | grep ${params.IMAGE_NAME}"
                }
            }
        }
        stage('Push to Registry') {
            steps {
                script {
                    echo "Tagging and pushing to ${env.REGISTRY}/${params.IMAGE_NAME}:${params.IMAGE_TAG}"
                    
                    // Tag the image for the registry
                    sh "docker tag ${params.IMAGE_NAME}:${params.IMAGE_TAG} ${env.REGISTRY}/${params.IMAGE_NAME}:${params.IMAGE_TAG}"
                    
                    // Push the image
                    sh "docker push ${env.REGISTRY}/${params.IMAGE_NAME}:${params.IMAGE_TAG}"
                    
                    // Verification
                    echo "Successfully pushed to registry:"
                    echo "${env.REGISTRY}/${params.IMAGE_NAME}:${params.IMAGE_TAG}"
                }
            }
        }
    }
}


// pipeline {
//     agent any

//     stages {
//         stage('Build') {
//             agent {
//                 docker {
//                     image 'golang:1.24.1'
//                     reuseNode true
//                     args '-u root' 
//                 }
//             }
//             steps {
//                 echo 'Building Go binary...'
//                 sh '''
//                     go version
//                     go mod tidy
//                     go build -o bin/todo-app main.go
//                     ls -la bin/
//                 '''
//             }
//         }
//     }
// }
